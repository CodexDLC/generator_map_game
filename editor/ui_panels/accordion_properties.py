# ==============================================================================
# editor/ui_panels/accordion_properties.py
# –í–ï–†–°–ò–Ø 3.3 (–£–õ–£–ß–®–ï–ù–ò–ï UX):
# - FIX: –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∞ —Ä–∞–±–æ—Ç–∞ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–π –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ –ø—Ä–∏ –±–æ–ª—å—à–æ–º –∫–æ–ª-–≤–µ —Å–≤–æ–π—Å—Ç–≤.
# - NEW: –î–æ–±–∞–≤–ª–µ–Ω –∫–æ–º–ø–æ–∑–∏—Ç–Ω—ã–π –≤–∏–¥–∂–µ—Ç SliderSpinCombo –¥–ª—è —É–¥–æ–±–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
#   –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ [0..1] —Å –ø–æ–º–æ—â—å—é –ø–æ–ª–∑—É–Ω–∫–∞.
# ==============================================================================

from __future__ import annotations

import random
from typing import Dict, Optional, Any, List

from PySide6 import QtWidgets, QtCore, QtGui
from PySide6.QtCore import Qt

from editor.theme import PALETTE
from editor.custom_graph import CustomNodeGraph
from editor.nodes.base_node import GeneratorNode


# ==============================================================================
# –ù–û–í–´–ô –í–ò–î–ñ–ï–¢ –î–õ–Ø –†–ê–ë–û–¢–´ –° –°–ò–î–ê–ú–ò
# ==============================================================================
class SeedWidget(QtWidgets.QWidget):
    """–ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤–∏–¥–∂–µ—Ç –¥–ª—è —Å–∏–¥–∞: –ø–æ–ª–µ –≤–≤–æ–¥–∞, –∫–Ω–æ–ø–∫–∞ "üé≤" –∏ –∏—Å—Ç–æ—Ä–∏—è."""
    valueChanged = QtCore.Signal(float)
    editingFinished = QtCore.Signal()

    def __init__(self, parent: Optional[QtWidgets.QWidget] = None):
        super().__init__(parent)
        self._block_signals = False

        self.spinbox = QtWidgets.QDoubleSpinBox()
        self.spinbox.setRange(0, 4294967295)
        self.spinbox.setDecimals(0)
        self.spinbox.setButtonSymbols(QtWidgets.QAbstractSpinBox.ButtonSymbols.NoButtons)

        self.generate_btn = QtWidgets.QToolButton()
        self.generate_btn.setText("üé≤")
        self.generate_btn.setToolTip("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π —Å–ª—É—á–∞–π–Ω—ã–π —Å–∏–¥")

        self.history_btn = QtWidgets.QToolButton()
        self.history_btn.setText("üìñ")
        self.history_btn.setToolTip("–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å–∏–¥–æ–≤")
        self.history_btn.setPopupMode(QtWidgets.QToolButton.ToolButtonPopupMode.InstantPopup)
        self.history_menu = QtWidgets.QMenu(self)
        self.history_btn.setMenu(self.history_menu)

        layout = QtWidgets.QHBoxLayout(self)
        layout.setContentsMargins(0, 0, 0, 0)
        layout.setSpacing(4)
        layout.addWidget(self.spinbox, 1)
        layout.addWidget(self.generate_btn)
        layout.addWidget(self.history_btn)

        self.generate_btn.clicked.connect(self.generate_new_seed)
        self.spinbox.valueChanged.connect(self.valueChanged.emit)
        self.spinbox.editingFinished.connect(self.editingFinished.emit)

    def generate_new_seed(self):
        new_seed = random.randint(0, 4294967295)
        self.spinbox.setValue(new_seed)
        self.editingFinished.emit()  # –°–∏–≥–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

    def value(self) -> int:
        return int(self.spinbox.value())

    def setValue(self, value: int):
        self.spinbox.setValue(value)

    def set_history(self, history: List[int]):
        self.history_menu.clear()
        for seed in history:
            action = QtGui.QAction(str(seed), self)
            action.triggered.connect(lambda _, s=seed: self.setValue(s))
            self.history_menu.addAction(action)

# ==============================================================================
# –ù–û–í–´–ô –ö–û–ú–ü–û–ó–ò–¢–ù–´–ô –í–ò–î–ñ–ï–¢: –ü–û–õ–ó–£–ù–û–ö + –ü–û–õ–ï –í–í–û–î–ê (—Å –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏)
# ==============================================================================
class SliderSpinCombo(QtWidgets.QWidget):
    """
    –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤–∏–¥–∂–µ—Ç, —Å–æ—Å—Ç–æ—è—â–∏–π –∏–∑ —Å–ª–∞–π–¥–µ—Ä–∞ (QSlider) –∏ —á–∏—Å–ª–æ–≤–æ–≥–æ
    –ø–æ–ª—è (QDoubleSpinBox) –¥–ª—è —Ç–æ—á–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–Ω–∞—á–µ–Ω–∏–π –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ [0, 1].
    """
    # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –°–∏–≥–Ω–∞–ª —Ç–µ–ø–µ—Ä—å –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ-–¥—Ä—É–≥–æ–º—É –¥–ª—è —è—Å–Ω–æ—Å—Ç–∏ ---
    editingFinished = QtCore.Signal()
    # --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–Ø ---

    def __init__(self, parent: Optional[QtWidgets.QWidget] = None):
        super().__init__(parent)
        self._block_signals = False

        # --- –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∫–æ–º–ø–æ–Ω–æ–≤–∫–∞ –≤–∏–¥–∂–µ—Ç–æ–≤ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ---
        self.slider = QtWidgets.QSlider(Qt.Orientation.Horizontal)
        self.slider.setRange(0, 1000)

        self.spinbox = QtWidgets.QDoubleSpinBox()
        self.spinbox.setRange(0.0, 1.0)
        self.spinbox.setDecimals(3)
        self.spinbox.setSingleStep(0.01)
        self.spinbox.setButtonSymbols(QtWidgets.QAbstractSpinBox.ButtonSymbols.NoButtons)
        self.spinbox.setFixedWidth(60)

        layout = QtWidgets.QHBoxLayout(self)
        layout.setContentsMargins(0, 0, 0, 0)
        layout.setSpacing(4)
        layout.addWidget(self.slider)
        layout.addWidget(self.spinbox)


        # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ü–æ–ª–Ω–æ—Å—Ç—å—é –Ω–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ ---
        # valueChanged –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–∏–≥–Ω–∞–ª–∞ –Ω–∞—Ä—É–∂—É
        self.slider.valueChanged.connect(self._on_slider_change)
        self.spinbox.valueChanged.connect(self._on_spinbox_change)
        
        # –°–∏–≥–Ω–∞–ª editingFinished –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        # –æ—Ç–ø—É—Å—Ç–∏—Ç —Å–ª–∞–π–¥–µ—Ä –∏–ª–∏ –∑–∞–∫–æ–Ω—á–∏—Ç –≤–≤–æ–¥ –≤ –ø–æ–ª–µ.
        self.slider.sliderReleased.connect(self.editingFinished.emit)
        self.spinbox.editingFinished.connect(self.editingFinished.emit)
        # --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–Ø ---

    def value(self) -> float:
        return self.spinbox.value()

    def setValue(self, value: float):
        value = max(0.0, min(1.0, float(value)))
        self._block_signals = True
        try:
            self.spinbox.setValue(value)
            self.slider.setValue(int(value * 1000))
        finally:
            self._block_signals = False
    
    @QtCore.Slot(int)
    def _on_slider_change(self, slider_value: int):
        if self._block_signals:
            return
        # –ü—Ä–æ—Å—Ç–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ, –Ω–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∏–≥–Ω–∞–ª
        float_value = slider_value / 1000.0
        self._block_signals = True
        self.spinbox.setValue(float_value)
        self._block_signals = False

    # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Å–ª–æ—Ç –¥–ª—è spinbox ---
    @QtCore.Slot(float)
    def _on_spinbox_change(self, spinbox_value: float):
        if self._block_signals:
            return
        # –ü—Ä–æ—Å—Ç–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ, –Ω–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∏–≥–Ω–∞–ª
        self._block_signals = True
        self.slider.setValue(int(spinbox_value * 1000))
        self._block_signals = False
    # --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–Ø ---


# ==============================================================================
# –§–∞–±—Ä–∏—á–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
# ==============================================================================
def create_properties_widget(parent: QtWidgets.QWidget) -> "AccordionProperties":
    props = AccordionProperties(parent=parent)
    props.setObjectName("PropertiesAccordion")
    props.setMinimumWidth(360)
    props.setSizePolicy(QtWidgets.QSizePolicy.Policy.Preferred, QtWidgets.QSizePolicy.Policy.Expanding)
    return props


# ==============================================================================
# –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –≤–∏–¥–∂–µ—Ç–∞ (—Å –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏)
# ==============================================================================
class CollapsibleBox(QtWidgets.QGroupBox):
    def __init__(self, title: str, parent=None):
        super().__init__(title, parent)
        self.setObjectName("CollapsibleBox")
        self.setCheckable(True)
        self.setChecked(True)

        # --- –ù–ê–ß–ê–õ–û –ò–ó–ú–ï–ù–ï–ù–ò–Ø ---
        # –≠—Ç–∞ —Å—Ç—Ä–æ–∫–∞ –∑–∞–ø—Ä–µ—â–∞–µ—Ç –≥—Ä—É–ø–ø–µ —Å–∂–∏–º–∞—Ç—å—Å—è –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏.
        # –¢–µ–ø–µ—Ä—å –æ–Ω–∞ –±—É–¥–µ—Ç —Ç—Ä–µ–±–æ–≤–∞—Ç—å —Ä–æ–≤–Ω–æ —Å—Ç–æ–ª—å–∫–æ –º–µ—Å—Ç–∞, —Å–∫–æ–ª—å–∫–æ –Ω—É–∂–Ω–æ –µ—ë —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É.
        self.setSizePolicy(QtWidgets.QSizePolicy.Policy.Preferred, QtWidgets.QSizePolicy.Policy.Minimum)
        # --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–Ø ---

        lay = QtWidgets.QVBoxLayout(self)
        lay.setContentsMargins(8, 6, 8, 8)
        lay.setSpacing(6)

        self._content = QtWidgets.QWidget(self)
        lay.addWidget(self._content)

        self.body = QtWidgets.QFormLayout(self._content)
        self.body.setContentsMargins(4, 4, 4, 4)
        self.body.setSpacing(6)

        self.toggled.connect(self._content.setVisible)


class AccordionProperties(QtWidgets.QScrollArea):
    def __init__(self, parent: Optional[QtWidgets.QWidget] = None):
        super().__init__(parent)
        self.setObjectName("AccordionProperties")
        self.setWidgetResizable(True)

        self._graph: Optional[CustomNodeGraph] = None
        self._node: Optional[GeneratorNode] = None
        self._main_window: Optional[QtWidgets.QMainWindow] = None

        self._root = QtWidgets.QWidget()
        self._root.setStyleSheet(f"background-color: {PALETTE['dock_bg']};")
        self._vl = QtWidgets.QVBoxLayout(self._root)
        self._vl.setContentsMargins(6, 6, 6, 6)
        self._vl.setSpacing(8)

        # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï –î–õ–Ø –ü–†–û–ö–†–£–¢–ö–ò ---
        # –ú—ã –ù–ï –¥–æ–±–∞–≤–ª—è–µ–º addStretch(1) –∑–¥–µ—Å—å. –†–∞—Å—Ç—è–≥–∏–≤–∞—é—â–∏–π—Å—è —ç–ª–µ–º–µ–Ω—Ç –±—É–¥–µ—Ç
        # –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–∞–º–æ–º –∫–æ–Ω—Ü–µ, –ø–æ—Å–ª–µ –≤—Å–µ—Ö –≤–∏–¥–∂–µ—Ç–æ–≤, –≤ –º–µ—Ç–æ–¥–µ _rebuild.
        # –≠—Ç–æ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ –µ—Å–ª–∏ –∫–æ–Ω—Ç–µ–Ω—Ç –ø—Ä–µ–≤—ã—Å–∏—Ç –≤—ã—Å–æ—Ç—É, –ø–æ—è–≤–∏—Ç—Å—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞.
        # --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–Ø ---

        self.setWidget(self._root)
        self.setFrameShape(QtWidgets.QFrame.Shape.NoFrame)

    # ... (–º–µ—Ç–æ–¥—ã set_graph, _on_graph_selection, clear_layout, set_node –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    def set_graph(self, graph: Optional[CustomNodeGraph], main_window: Optional[QtWidgets.QMainWindow] = None) -> None:
        self._main_window = main_window  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É
        if self._graph is graph:
            return

        if self._graph:
            try:
                self._graph.selection_changed.disconnect(self._on_graph_selection)
            except (RuntimeError, TypeError):
                pass

        self._graph = graph
        if self._graph is None:
            return

        self._graph.selection_changed.connect(self._on_graph_selection)
        self._on_graph_selection(self._graph.selected_nodes())

    @QtCore.Slot(list)
    def _on_graph_selection(self, selected_nodes: list) -> None:
        node = None
        if selected_nodes and isinstance(selected_nodes[0], GeneratorNode):
            node = selected_nodes[0]

        self.set_node(node)

    def clear_layout(self):
        while self._vl.count():
            item = self._vl.takeAt(0)
            if item is None: continue
            w = item.widget()
            if w:
                w.deleteLater()
            layout = item.layout()
            if layout:
                while layout.count():
                    child = layout.takeAt(0)
                    if child.widget():
                        child.widget().deleteLater()

    @QtCore.Slot(object)
    def set_node(self, node: Optional[GeneratorNode]):
        if self._node is node:
            return

        self._node = node
        self._rebuild()

    def _rebuild(self):
        self.clear_layout()

        node = self._node
        if not node:
            # –ï—Å–ª–∏ –Ω–æ–¥–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞, –¥–æ–±–∞–≤–ª—è–µ–º —Ä–∞—Å—Ç—è–∂–∫—É, —á—Ç–æ–±—ã –Ω–∏—á–µ–≥–æ –Ω–µ –±—ã–ª–æ
            self._vl.addStretch(1)
            return

        meta = node.properties_meta()

        if not meta:
            self._vl.addStretch(1)
            return

        groups: Dict[str, CollapsibleBox] = {}

        sorted_meta_items = sorted(meta.items(), key=lambda item: (
            item[1].get('group') or 'Params',
            item[0]
        ))

        for name, prop_meta in sorted_meta_items:
            if name in ('name', 'color', 'text_color', 'disabled'):
                continue

            group_name = prop_meta.get('group') or 'Params'

            if group_name not in groups:
                box = CollapsibleBox(group_name, self._root)
                groups[group_name] = box
                self._vl.addWidget(box)

            box = groups[group_name]

            widget = self._create_widget_for_property(node, name, prop_meta)
            if widget:
                label = prop_meta.get('label', name)
                box.body.addRow(label, widget)

        # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï –î–õ–Ø –ü–†–û–ö–†–£–¢–ö–ò ---
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞—Å—Ç—è–∂–∫—É –≤ —Å–∞–º—ã–π –∫–æ–Ω–µ—Ü, —á—Ç–æ–±—ã –≤—Å–µ –≥—Ä—É–ø–ø—ã –ø—Ä–∏–∂–∏–º–∞–ª–∏—Å—å –∫–≤–µ—Ä—Ö—É.
        self._vl.addStretch(1)
        # --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–Ø ---

    def _create_widget_for_property(self, node: GeneratorNode, name: str, meta: dict) -> Optional[QtWidgets.QWidget]:
        kind = meta.get('type')
        value = node.get_property(name)
        label = meta.get('label', name)
        update_slot = getattr(self._main_window, '_trigger_preview_update', None)

        is_float = kind in ('float', 'double', 'f')
        # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –£–ª—É—á—à–µ–Ω–Ω–æ–µ –∏ –±–æ–ª–µ–µ –æ–±—â–µ–µ —É—Å–ª–æ–≤–∏–µ –¥–ª—è –ø–æ–ª–∑—É–Ω–∫–∞ ---
        is_ratio = "(0..1)" in label or "(%)" in label or "ratio" in name.lower() or "lerp" in name.lower() or "gain" in name.lower() or "jitter" in name.lower() or "strength" in name.lower() or "amplitude" in name.lower()
        # --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–Ø ---

        if is_float and is_ratio:
            w = SliderSpinCombo()
            w.setValue(value)
            # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –∫ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —Å–≤–æ–π—Å—Ç–≤–∞ –Ω–æ–¥—ã
            w.slider.valueChanged.connect(lambda val, nn=name, ww=w: node.set_property(nn, val / 1000.0))
            w.spinbox.valueChanged.connect(lambda val, nn=name, ww=w: node.set_property(nn, val))
            # –ê —Å–∏–≥–Ω–∞–ª –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è - –∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—é –ø—Ä–µ–≤—å—é
            if update_slot:
                w.editingFinished.connect(update_slot)
            return w

        if kind == 'line':
            w = QtWidgets.QLineEdit()
            if name == 'name' and value is None:
                value = node.name()
            w.setText(str(value))
            w.editingFinished.connect(lambda nn=name, ww=w: node.set_property(nn, ww.text()))
            if update_slot:
                w.editingFinished.connect(update_slot)
            return w

        elif kind in ('int', 'i', 'float', 'double', 'f'):
            w = QtWidgets.QDoubleSpinBox()
            if is_float:
                w.setDecimals(meta.get('decimals', 3))
                w.setSingleStep(meta.get('step', 0.01))
                w.setRange(meta.get('range', (-1e12, 1e12))[0], meta.get('range', (-1e12, 1e12))[1])
            else:
                w.setDecimals(0)
                w.setSingleStep(meta.get('step', 1))
                w.setRange(meta.get('range', (-4294967295, 4294967295))[0],
                           meta.get('range', (-4294967295, 4294967295))[1])

            w.setButtonSymbols(QtWidgets.QAbstractSpinBox.ButtonSymbols.NoButtons)
            w.setAlignment(Qt.AlignmentFlag.AlignRight)
            w.setMaximumWidth(meta.get('width', 100))
            w.setValue(float(value or 0))
            # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã ---
            w.valueChanged.connect(lambda val, nn=name: node.set_property(nn, val)) # –û–±–Ω–æ–≤–ª—è–µ–º —Å–≤–æ–π—Å—Ç–≤–æ —Å—Ä–∞–∑—É
            if update_slot:
                w.editingFinished.connect(update_slot) # –ê –ø—Ä–µ–≤—å—é - –ø–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—é
            # --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–Ø ---
            return w
        
        # --- –ù–ê–ß–ê–õ–û –ù–û–í–û–ì–û –ë–õ–û–ö–ê ---
        elif kind == 'seed':
            w = SeedWidget()
            w.setValue(int(value or 0))

            # –ó–∞–ø–æ–ª–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
            history = node._seed_history.get(name, [])
            w.set_history(history)

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–≤–æ–π—Å—Ç–≤–æ –Ω–æ–¥—ã –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∑–Ω–∞—á–µ–Ω–∏—è
            w.valueChanged.connect(lambda val, nn=name: node.set_property(nn, int(val)))

            # –ü—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–∫–ª–∏–∫ –ø–æ "üé≤" –∏–ª–∏ Enter)
            def on_finish():
                new_val = w.value()
                # 1. –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
                node.add_to_seed_history(name, new_val)
                # 2. –û–±–Ω–æ–≤–ª—è–µ–º –≤—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫
                w.set_history(node._seed_history.get(name, []))
                # 3. –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–µ—Å—á–µ—Ç –ø—Ä–µ–≤—å—é
                if update_slot:
                    update_slot()

            w.editingFinished.connect(on_finish)
            return w
        # --- –ö–û–ù–ï–¶ –ù–û–í–û–ì–û –ë–õ–û–ö–ê ---

        elif kind == 'check':
            w = QtWidgets.QCheckBox()
            w.setChecked(bool(value))
            w.toggled.connect(lambda state, nn=name: node.set_property(nn, state))
            if update_slot:
                w.toggled.connect(update_slot)
            return w

        elif kind == 'combo':
            w = QtWidgets.QComboBox()
            items = [str(x) for x in meta.get('items', [])]
            w.addItems(items)
            if str(value) in items:
                w.setCurrentText(str(value))
            w.currentTextChanged.connect(lambda text, nn=name: node.set_property(nn, text))
            if update_slot:
                w.currentTextChanged.connect(update_slot)
            return w

        return None
